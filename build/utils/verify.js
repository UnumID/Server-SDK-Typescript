"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.doVerifyDeprecated = exports.doVerify = void 0;
var logger_1 = __importDefault(require("../logger"));
var library_crypto_1 = require("@unumid/library-crypto");
var lodash_1 = require("lodash");
/**
 * Verify the signature on the provided byte array.
 * @param signature
 * @param data
 * @param publicKey
 * @param encoding String ('base58' | 'pem'), defaults to 'pem'
 */
exports.doVerify = function (signature, data, publicKey) {
    logger_1.default.debug("Signature data verification using public key " + JSON.stringify(publicKey));
    var result = library_crypto_1.verifyBytes(signature, data, publicKey);
    logger_1.default.debug("Signature data is valid: " + result + ".");
    return result;
};
/**
 * Verify the signature on the provided data object or optional dataString.
 * Deprecated in favor of doVerifyBytes which is made to be leveraged with Protobufs for deterministic byte array (de)serialization.
 *
 * @param signature
 * @param data
 * @param publicKey
 * @param encoding String ('base58' | 'pem'), defaults to 'pem'
 * @param stringData Optional String, for cases where the text encoding maybe different, using the provided string to check the signature then compare against the object itself
 */
exports.doVerifyDeprecated = function (signature, data, publicKey, encoding, dataString) {
    if (encoding === void 0) { encoding = 'pem'; }
    var isVerifiedData = doVerifyData(signature, data, publicKey, encoding);
    var isVerifiedString = !isVerifiedData ? doVerifyString(signature, data, publicKey, dataString, encoding) : false;
    var result = isVerifiedData || isVerifiedString;
    logger_1.default.debug("Signature is valid: " + result + ".");
    return result;
};
/**
 * Verify the signature on the provided data object.
 * Should only be used if dealing with projects can ensure identical data object string encoding.
 * For this reason it is deprecated in favor of doVerifyBytes which is made to be leveraged with Protobufs for deterministic byte array (de)serialization.
 * @param signature
 * @param data
 * @param publicKey
 * @param encoding String ('base58' | 'pem'), defaults to 'pem'
 */
var doVerifyData = function (signature, data, publicKey, encoding) {
    if (encoding === void 0) { encoding = 'pem'; }
    logger_1.default.debug("Signature data verification using public key " + JSON.stringify(publicKey));
    var result = library_crypto_1.verify(signature, data, publicKey, encoding);
    logger_1.default.debug("Signature data is valid: " + result + ".");
    return result;
};
/**
 * Verify the signature on the provided data object using the unsignedString value.
 * This is to get around the way different runtime environments handle text encoding, i.e. between iOS and V8 (Node)
 * Note: this is valid work around thanks to then ensuring the stringData converted to an object has the same shallow values of the data object.
 * Deprecated in favor of doVerifyBytes which is made to be leveraged with Protobufs for deterministic byte array (de)serialization.
 * @param signature
 * @param data
 * @param publicKey
 * @param encoding String ('base58' | 'pem'), defaults to 'pem'
 */
var doVerifyString = function (signature, data, publicKey, dataString, encoding) {
    if (encoding === void 0) { encoding = 'pem'; }
    if (!dataString) {
        logger_1.default.debug('No Signature unsignedString value; skipping string verification.');
        return false;
    }
    logger_1.default.debug("Signature unsignedString verification using public key " + JSON.stringify(publicKey));
    var result = library_crypto_1.verifyString(signature, dataString, publicKey, encoding);
    logger_1.default.debug("Signature unsignedString is valid: " + result + ".");
    var finalResult = false;
    if (result) {
        // need to also verify that the stringData converted to an object matches the data object
        finalResult = lodash_1.isEqual(data, JSON.parse(dataString));
    }
    logger_1.default.debug("Signature unsignedString is valid and matches data object: " + finalResult + ".");
    return finalResult;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyaWZ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL3ZlcmlmeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxxREFBK0I7QUFFL0IseURBQTJFO0FBQzNFLGlDQUFpQztBQUVqQzs7Ozs7O0dBTUc7QUFDVSxRQUFBLFFBQVEsR0FBRyxVQUFDLFNBQWlCLEVBQUUsSUFBZ0IsRUFBRSxTQUF3QjtJQUNwRixnQkFBTSxDQUFDLEtBQUssQ0FBQyxrREFBZ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUcsQ0FBQyxDQUFDO0lBQzFGLElBQU0sTUFBTSxHQUFXLDRCQUFXLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztJQUUvRCxnQkFBTSxDQUFDLEtBQUssQ0FBQyw4QkFBNEIsTUFBTSxNQUFHLENBQUMsQ0FBQztJQUNwRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDLENBQUM7QUFFRjs7Ozs7Ozs7O0dBU0c7QUFDVSxRQUFBLGtCQUFrQixHQUFHLFVBQUMsU0FBaUIsRUFBRSxJQUFhLEVBQUUsU0FBaUIsRUFBRSxRQUFrQyxFQUFFLFVBQW1CO0lBQXZELHlCQUFBLEVBQUEsZ0JBQWtDO0lBQ3hILElBQU0sY0FBYyxHQUFHLFlBQVksQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUMxRSxJQUFNLGdCQUFnQixHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFFcEgsSUFBTSxNQUFNLEdBQVcsY0FBYyxJQUFJLGdCQUFnQixDQUFDO0lBQzFELGdCQUFNLENBQUMsS0FBSyxDQUFDLHlCQUF1QixNQUFNLE1BQUcsQ0FBQyxDQUFDO0lBQy9DLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsQ0FBQztBQUVGOzs7Ozs7OztHQVFHO0FBQ0gsSUFBTSxZQUFZLEdBQUcsVUFBQyxTQUFpQixFQUFFLElBQWEsRUFBRSxTQUFpQixFQUFFLFFBQWtDO0lBQWxDLHlCQUFBLEVBQUEsZ0JBQWtDO0lBQzNHLGdCQUFNLENBQUMsS0FBSyxDQUFDLGtEQUFnRCxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBRyxDQUFDLENBQUM7SUFDMUYsSUFBTSxNQUFNLEdBQVcsdUJBQU0sQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUVwRSxnQkFBTSxDQUFDLEtBQUssQ0FBQyw4QkFBNEIsTUFBTSxNQUFHLENBQUMsQ0FBQztJQUNwRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDLENBQUM7QUFFRjs7Ozs7Ozs7O0dBU0c7QUFDSCxJQUFNLGNBQWMsR0FBRyxVQUFDLFNBQWlCLEVBQUUsSUFBYSxFQUFFLFNBQWlCLEVBQUUsVUFBbUIsRUFBRSxRQUFrQztJQUFsQyx5QkFBQSxFQUFBLGdCQUFrQztJQUNsSSxJQUFJLENBQUMsVUFBVSxFQUFFO1FBQ2YsZ0JBQU0sQ0FBQyxLQUFLLENBQUMsa0VBQWtFLENBQUMsQ0FBQztRQUNqRixPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsZ0JBQU0sQ0FBQyxLQUFLLENBQUMsNERBQTBELElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFHLENBQUMsQ0FBQztJQUNwRyxJQUFNLE1BQU0sR0FBVyw2QkFBWSxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRWhGLGdCQUFNLENBQUMsS0FBSyxDQUFDLHdDQUFzQyxNQUFNLE1BQUcsQ0FBQyxDQUFDO0lBQzlELElBQUksV0FBVyxHQUFHLEtBQUssQ0FBQztJQUN4QixJQUFJLE1BQU0sRUFBRTtRQUNWLHlGQUF5RjtRQUN6RixXQUFXLEdBQUcsZ0JBQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0tBQ3JEO0lBRUQsZ0JBQU0sQ0FBQyxLQUFLLENBQUMsZ0VBQThELFdBQVcsTUFBRyxDQUFDLENBQUM7SUFDM0YsT0FBTyxXQUFXLENBQUM7QUFDckIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHsgSlNPTk9iaiwgUHVibGljS2V5SW5mbyB9IGZyb20gJ0B1bnVtaWQvdHlwZXMnO1xuaW1wb3J0IHsgdmVyaWZ5LCB2ZXJpZnlCeXRlcywgdmVyaWZ5U3RyaW5nIH0gZnJvbSAnQHVudW1pZC9saWJyYXJ5LWNyeXB0byc7XG5pbXBvcnQgeyBpc0VxdWFsIH0gZnJvbSAnbG9kYXNoJztcblxuLyoqXG4gKiBWZXJpZnkgdGhlIHNpZ25hdHVyZSBvbiB0aGUgcHJvdmlkZWQgYnl0ZSBhcnJheS5cbiAqIEBwYXJhbSBzaWduYXR1cmVcbiAqIEBwYXJhbSBkYXRhXG4gKiBAcGFyYW0gcHVibGljS2V5XG4gKiBAcGFyYW0gZW5jb2RpbmcgU3RyaW5nICgnYmFzZTU4JyB8ICdwZW0nKSwgZGVmYXVsdHMgdG8gJ3BlbSdcbiAqL1xuZXhwb3J0IGNvbnN0IGRvVmVyaWZ5ID0gKHNpZ25hdHVyZTogc3RyaW5nLCBkYXRhOiBVaW50OEFycmF5LCBwdWJsaWNLZXk6IFB1YmxpY0tleUluZm8pOiBib29sZWFuID0+IHtcbiAgbG9nZ2VyLmRlYnVnKGBTaWduYXR1cmUgZGF0YSB2ZXJpZmljYXRpb24gdXNpbmcgcHVibGljIGtleSAke0pTT04uc3RyaW5naWZ5KHB1YmxpY0tleSl9YCk7XG4gIGNvbnN0IHJlc3VsdDpib29sZWFuID0gdmVyaWZ5Qnl0ZXMoc2lnbmF0dXJlLCBkYXRhLCBwdWJsaWNLZXkpO1xuXG4gIGxvZ2dlci5kZWJ1ZyhgU2lnbmF0dXJlIGRhdGEgaXMgdmFsaWQ6ICR7cmVzdWx0fS5gKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogVmVyaWZ5IHRoZSBzaWduYXR1cmUgb24gdGhlIHByb3ZpZGVkIGRhdGEgb2JqZWN0IG9yIG9wdGlvbmFsIGRhdGFTdHJpbmcuXG4gKiBEZXByZWNhdGVkIGluIGZhdm9yIG9mIGRvVmVyaWZ5Qnl0ZXMgd2hpY2ggaXMgbWFkZSB0byBiZSBsZXZlcmFnZWQgd2l0aCBQcm90b2J1ZnMgZm9yIGRldGVybWluaXN0aWMgYnl0ZSBhcnJheSAoZGUpc2VyaWFsaXphdGlvbi5cbiAqXG4gKiBAcGFyYW0gc2lnbmF0dXJlXG4gKiBAcGFyYW0gZGF0YVxuICogQHBhcmFtIHB1YmxpY0tleVxuICogQHBhcmFtIGVuY29kaW5nIFN0cmluZyAoJ2Jhc2U1OCcgfCAncGVtJyksIGRlZmF1bHRzIHRvICdwZW0nXG4gKiBAcGFyYW0gc3RyaW5nRGF0YSBPcHRpb25hbCBTdHJpbmcsIGZvciBjYXNlcyB3aGVyZSB0aGUgdGV4dCBlbmNvZGluZyBtYXliZSBkaWZmZXJlbnQsIHVzaW5nIHRoZSBwcm92aWRlZCBzdHJpbmcgdG8gY2hlY2sgdGhlIHNpZ25hdHVyZSB0aGVuIGNvbXBhcmUgYWdhaW5zdCB0aGUgb2JqZWN0IGl0c2VsZlxuICovXG5leHBvcnQgY29uc3QgZG9WZXJpZnlEZXByZWNhdGVkID0gKHNpZ25hdHVyZTogc3RyaW5nLCBkYXRhOiBKU09OT2JqLCBwdWJsaWNLZXk6IHN0cmluZywgZW5jb2Rpbmc6ICdiYXNlNTgnIHwgJ3BlbScgPSAncGVtJywgZGF0YVN0cmluZz86IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICBjb25zdCBpc1ZlcmlmaWVkRGF0YSA9IGRvVmVyaWZ5RGF0YShzaWduYXR1cmUsIGRhdGEsIHB1YmxpY0tleSwgZW5jb2RpbmcpO1xuICBjb25zdCBpc1ZlcmlmaWVkU3RyaW5nID0gIWlzVmVyaWZpZWREYXRhID8gZG9WZXJpZnlTdHJpbmcoc2lnbmF0dXJlLCBkYXRhLCBwdWJsaWNLZXksIGRhdGFTdHJpbmcsIGVuY29kaW5nKSA6IGZhbHNlO1xuXG4gIGNvbnN0IHJlc3VsdDpib29sZWFuID0gaXNWZXJpZmllZERhdGEgfHwgaXNWZXJpZmllZFN0cmluZztcbiAgbG9nZ2VyLmRlYnVnKGBTaWduYXR1cmUgaXMgdmFsaWQ6ICR7cmVzdWx0fS5gKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogVmVyaWZ5IHRoZSBzaWduYXR1cmUgb24gdGhlIHByb3ZpZGVkIGRhdGEgb2JqZWN0LlxuICogU2hvdWxkIG9ubHkgYmUgdXNlZCBpZiBkZWFsaW5nIHdpdGggcHJvamVjdHMgY2FuIGVuc3VyZSBpZGVudGljYWwgZGF0YSBvYmplY3Qgc3RyaW5nIGVuY29kaW5nLlxuICogRm9yIHRoaXMgcmVhc29uIGl0IGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgZG9WZXJpZnlCeXRlcyB3aGljaCBpcyBtYWRlIHRvIGJlIGxldmVyYWdlZCB3aXRoIFByb3RvYnVmcyBmb3IgZGV0ZXJtaW5pc3RpYyBieXRlIGFycmF5IChkZSlzZXJpYWxpemF0aW9uLlxuICogQHBhcmFtIHNpZ25hdHVyZVxuICogQHBhcmFtIGRhdGFcbiAqIEBwYXJhbSBwdWJsaWNLZXlcbiAqIEBwYXJhbSBlbmNvZGluZyBTdHJpbmcgKCdiYXNlNTgnIHwgJ3BlbScpLCBkZWZhdWx0cyB0byAncGVtJ1xuICovXG5jb25zdCBkb1ZlcmlmeURhdGEgPSAoc2lnbmF0dXJlOiBzdHJpbmcsIGRhdGE6IEpTT05PYmosIHB1YmxpY0tleTogc3RyaW5nLCBlbmNvZGluZzogJ2Jhc2U1OCcgfCAncGVtJyA9ICdwZW0nKTogYm9vbGVhbiA9PiB7XG4gIGxvZ2dlci5kZWJ1ZyhgU2lnbmF0dXJlIGRhdGEgdmVyaWZpY2F0aW9uIHVzaW5nIHB1YmxpYyBrZXkgJHtKU09OLnN0cmluZ2lmeShwdWJsaWNLZXkpfWApO1xuICBjb25zdCByZXN1bHQ6Ym9vbGVhbiA9IHZlcmlmeShzaWduYXR1cmUsIGRhdGEsIHB1YmxpY0tleSwgZW5jb2RpbmcpO1xuXG4gIGxvZ2dlci5kZWJ1ZyhgU2lnbmF0dXJlIGRhdGEgaXMgdmFsaWQ6ICR7cmVzdWx0fS5gKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogVmVyaWZ5IHRoZSBzaWduYXR1cmUgb24gdGhlIHByb3ZpZGVkIGRhdGEgb2JqZWN0IHVzaW5nIHRoZSB1bnNpZ25lZFN0cmluZyB2YWx1ZS5cbiAqIFRoaXMgaXMgdG8gZ2V0IGFyb3VuZCB0aGUgd2F5IGRpZmZlcmVudCBydW50aW1lIGVudmlyb25tZW50cyBoYW5kbGUgdGV4dCBlbmNvZGluZywgaS5lLiBiZXR3ZWVuIGlPUyBhbmQgVjggKE5vZGUpXG4gKiBOb3RlOiB0aGlzIGlzIHZhbGlkIHdvcmsgYXJvdW5kIHRoYW5rcyB0byB0aGVuIGVuc3VyaW5nIHRoZSBzdHJpbmdEYXRhIGNvbnZlcnRlZCB0byBhbiBvYmplY3QgaGFzIHRoZSBzYW1lIHNoYWxsb3cgdmFsdWVzIG9mIHRoZSBkYXRhIG9iamVjdC5cbiAqIERlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgZG9WZXJpZnlCeXRlcyB3aGljaCBpcyBtYWRlIHRvIGJlIGxldmVyYWdlZCB3aXRoIFByb3RvYnVmcyBmb3IgZGV0ZXJtaW5pc3RpYyBieXRlIGFycmF5IChkZSlzZXJpYWxpemF0aW9uLlxuICogQHBhcmFtIHNpZ25hdHVyZVxuICogQHBhcmFtIGRhdGFcbiAqIEBwYXJhbSBwdWJsaWNLZXlcbiAqIEBwYXJhbSBlbmNvZGluZyBTdHJpbmcgKCdiYXNlNTgnIHwgJ3BlbScpLCBkZWZhdWx0cyB0byAncGVtJ1xuICovXG5jb25zdCBkb1ZlcmlmeVN0cmluZyA9IChzaWduYXR1cmU6IHN0cmluZywgZGF0YTogSlNPTk9iaiwgcHVibGljS2V5OiBzdHJpbmcsIGRhdGFTdHJpbmc/OiBzdHJpbmcsIGVuY29kaW5nOiAnYmFzZTU4JyB8ICdwZW0nID0gJ3BlbScpOiBib29sZWFuID0+IHtcbiAgaWYgKCFkYXRhU3RyaW5nKSB7XG4gICAgbG9nZ2VyLmRlYnVnKCdObyBTaWduYXR1cmUgdW5zaWduZWRTdHJpbmcgdmFsdWU7IHNraXBwaW5nIHN0cmluZyB2ZXJpZmljYXRpb24uJyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgbG9nZ2VyLmRlYnVnKGBTaWduYXR1cmUgdW5zaWduZWRTdHJpbmcgdmVyaWZpY2F0aW9uIHVzaW5nIHB1YmxpYyBrZXkgJHtKU09OLnN0cmluZ2lmeShwdWJsaWNLZXkpfWApO1xuICBjb25zdCByZXN1bHQ6Ym9vbGVhbiA9IHZlcmlmeVN0cmluZyhzaWduYXR1cmUsIGRhdGFTdHJpbmcsIHB1YmxpY0tleSwgZW5jb2RpbmcpO1xuXG4gIGxvZ2dlci5kZWJ1ZyhgU2lnbmF0dXJlIHVuc2lnbmVkU3RyaW5nIGlzIHZhbGlkOiAke3Jlc3VsdH0uYCk7XG4gIGxldCBmaW5hbFJlc3VsdCA9IGZhbHNlO1xuICBpZiAocmVzdWx0KSB7XG4gICAgLy8gbmVlZCB0byBhbHNvIHZlcmlmeSB0aGF0IHRoZSBzdHJpbmdEYXRhIGNvbnZlcnRlZCB0byBhbiBvYmplY3QgbWF0Y2hlcyB0aGUgZGF0YSBvYmplY3RcbiAgICBmaW5hbFJlc3VsdCA9IGlzRXF1YWwoZGF0YSwgSlNPTi5wYXJzZShkYXRhU3RyaW5nKSk7XG4gIH1cblxuICBsb2dnZXIuZGVidWcoYFNpZ25hdHVyZSB1bnNpZ25lZFN0cmluZyBpcyB2YWxpZCBhbmQgbWF0Y2hlcyBkYXRhIG9iamVjdDogJHtmaW5hbFJlc3VsdH0uYCk7XG4gIHJldHVybiBmaW5hbFJlc3VsdDtcbn07XG4iXX0=