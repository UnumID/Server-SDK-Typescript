"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var winston_1 = require("winston");
var config_1 = require("./config");
// Only adding the timestamp if running locally. Otherwise the timestamp is little redundant when can be added in supplementary fashion outside of the message itself.
var consoleFormat = config_1.configData.nodeEnv === 'local'
    ? winston_1.format.combine(winston_1.format.colorize(), winston_1.format.timestamp({
        format: 'HH:mm.ss.SSS'
    }), winston_1.format.printf(function (info) {
        return info.timestamp + " " + info.level + ": " + info.message;
    }))
    : winston_1.format.combine(winston_1.format.printf(function (info) {
        return info.level + ": " + info.message;
    }));
// Configure the Winston logger. For the complete documentation see https://github.com/winstonjs/winston
var logger = winston_1.createLogger({
    format: winston_1.format.combine(winston_1.format.splat(), winston_1.format.errors({ stack: true })),
    transports: [
        new winston_1.transports.Console({
            level: config_1.configData.logLevel || 'info',
            format: consoleFormat
        })
    ],
    silent: process.env.NODE_ENV === 'test'
});
// Printing this info here instead of in ./config to prevent a circular dependency.
logger.debug("Server SDK SaaS URL: " + config_1.configData.SaaSUrl);
logger.debug("Server SDK Log Level: " + config_1.configData.logLevel);
exports.default = logger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUEyRDtBQUMzRCxtQ0FBc0M7QUFFdEMsc0tBQXNLO0FBQ3RLLElBQU0sYUFBYSxHQUFHLG1CQUFVLENBQUMsT0FBTyxLQUFLLE9BQU87SUFDbEQsQ0FBQyxDQUFDLGdCQUFNLENBQUMsT0FBTyxDQUNkLGdCQUFNLENBQUMsUUFBUSxFQUFFLEVBQ2pCLGdCQUFNLENBQUMsU0FBUyxDQUFDO1FBQ2YsTUFBTSxFQUFFLGNBQWM7S0FDdkIsQ0FBQyxFQUNGLGdCQUFNLENBQUMsTUFBTSxDQUFDLFVBQUEsSUFBSTtRQUNoQixPQUFVLElBQUksQ0FBQyxTQUFTLFNBQUksSUFBSSxDQUFDLEtBQUssVUFBSyxJQUFJLENBQUMsT0FBUyxDQUFDO0lBQzVELENBQUMsQ0FBQyxDQUNIO0lBQ0QsQ0FBQyxDQUFDLGdCQUFNLENBQUMsT0FBTyxDQUNkLGdCQUFNLENBQUMsTUFBTSxDQUFDLFVBQUEsSUFBSTtRQUNoQixPQUFVLElBQUksQ0FBQyxLQUFLLFVBQUssSUFBSSxDQUFDLE9BQVMsQ0FBQztJQUMxQyxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBRUosd0dBQXdHO0FBQ3hHLElBQU0sTUFBTSxHQUFHLHNCQUFZLENBQUM7SUFDMUIsTUFBTSxFQUFFLGdCQUFNLENBQUMsT0FBTyxDQUNwQixnQkFBTSxDQUFDLEtBQUssRUFBRSxFQUNkLGdCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQy9CO0lBQ0QsVUFBVSxFQUFFO1FBQ1YsSUFBSSxvQkFBVSxDQUFDLE9BQU8sQ0FBQztZQUNyQixLQUFLLEVBQUUsbUJBQVUsQ0FBQyxRQUFRLElBQUksTUFBTTtZQUNwQyxNQUFNLEVBQUUsYUFBYTtTQUN0QixDQUFDO0tBQ0g7SUFDRCxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssTUFBTTtDQUN4QyxDQUFDLENBQUM7QUFFSCxtRkFBbUY7QUFDbkYsTUFBTSxDQUFDLEtBQUssQ0FBQywwQkFBd0IsbUJBQVUsQ0FBQyxPQUFTLENBQUMsQ0FBQztBQUMzRCxNQUFNLENBQUMsS0FBSyxDQUFDLDJCQUF5QixtQkFBVSxDQUFDLFFBQVUsQ0FBQyxDQUFDO0FBRTdELGtCQUFlLE1BQU0sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUxvZ2dlciwgZm9ybWF0LCB0cmFuc3BvcnRzIH0gZnJvbSAnd2luc3Rvbic7XG5pbXBvcnQgeyBjb25maWdEYXRhIH0gZnJvbSAnLi9jb25maWcnO1xuXG4vLyBPbmx5IGFkZGluZyB0aGUgdGltZXN0YW1wIGlmIHJ1bm5pbmcgbG9jYWxseS4gT3RoZXJ3aXNlIHRoZSB0aW1lc3RhbXAgaXMgbGl0dGxlIHJlZHVuZGFudCB3aGVuIGNhbiBiZSBhZGRlZCBpbiBzdXBwbGVtZW50YXJ5IGZhc2hpb24gb3V0c2lkZSBvZiB0aGUgbWVzc2FnZSBpdHNlbGYuXG5jb25zdCBjb25zb2xlRm9ybWF0ID0gY29uZmlnRGF0YS5ub2RlRW52ID09PSAnbG9jYWwnXG4gID8gZm9ybWF0LmNvbWJpbmUoXG4gICAgZm9ybWF0LmNvbG9yaXplKCksXG4gICAgZm9ybWF0LnRpbWVzdGFtcCh7XG4gICAgICBmb3JtYXQ6ICdISDptbS5zcy5TU1MnXG4gICAgfSksXG4gICAgZm9ybWF0LnByaW50ZihpbmZvID0+IHtcbiAgICAgIHJldHVybiBgJHtpbmZvLnRpbWVzdGFtcH0gJHtpbmZvLmxldmVsfTogJHtpbmZvLm1lc3NhZ2V9YDtcbiAgICB9KVxuICApXG4gIDogZm9ybWF0LmNvbWJpbmUoXG4gICAgZm9ybWF0LnByaW50ZihpbmZvID0+IHtcbiAgICAgIHJldHVybiBgJHtpbmZvLmxldmVsfTogJHtpbmZvLm1lc3NhZ2V9YDtcbiAgICB9KVxuICApO1xuXG4vLyBDb25maWd1cmUgdGhlIFdpbnN0b24gbG9nZ2VyLiBGb3IgdGhlIGNvbXBsZXRlIGRvY3VtZW50YXRpb24gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aW5zdG9uanMvd2luc3RvblxuY29uc3QgbG9nZ2VyID0gY3JlYXRlTG9nZ2VyKHtcbiAgZm9ybWF0OiBmb3JtYXQuY29tYmluZShcbiAgICBmb3JtYXQuc3BsYXQoKSxcbiAgICBmb3JtYXQuZXJyb3JzKHsgc3RhY2s6IHRydWUgfSlcbiAgKSxcbiAgdHJhbnNwb3J0czogW1xuICAgIG5ldyB0cmFuc3BvcnRzLkNvbnNvbGUoe1xuICAgICAgbGV2ZWw6IGNvbmZpZ0RhdGEubG9nTGV2ZWwgfHwgJ2luZm8nLFxuICAgICAgZm9ybWF0OiBjb25zb2xlRm9ybWF0XG4gICAgfSlcbiAgXSxcbiAgc2lsZW50OiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnXG59KTtcblxuLy8gUHJpbnRpbmcgdGhpcyBpbmZvIGhlcmUgaW5zdGVhZCBvZiBpbiAuL2NvbmZpZyB0byBwcmV2ZW50IGEgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbmxvZ2dlci5kZWJ1ZyhgU2VydmVyIFNESyBTYWFTIFVSTDogJHtjb25maWdEYXRhLlNhYVNVcmx9YCk7XG5sb2dnZXIuZGVidWcoYFNlcnZlciBTREsgTG9nIExldmVsOiAke2NvbmZpZ0RhdGEubG9nTGV2ZWx9YCk7XG5cbmV4cG9ydCBkZWZhdWx0IGxvZ2dlcjtcbiJdfQ==