"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var winston_1 = require("winston");
var config_1 = require("./config");
// Only adding the timestamp if running locally. Otherwise the timestamp is little redundant when can be added in supplementary fashion outside of the message itself.
var consoleFormat = config_1.configData.nodeEnv === 'local'
    ? winston_1.format.combine(winston_1.format.colorize(), winston_1.format.timestamp({
        format: 'HH:mm.ss.SSS'
    }), winston_1.format.printf(function (info) {
        return info.timestamp + " " + info.level + ": " + info.message;
    }))
    : winston_1.format.combine(winston_1.format.printf(function (info) {
        return info.level + ": " + info.message;
    }));
// Configure the Winston logger. For the complete documentation see https://github.com/winstonjs/winston
var logger = winston_1.createLogger({
    format: winston_1.format.combine(winston_1.format.splat(), winston_1.format.errors({ stack: true })),
    transports: [
        new winston_1.transports.Console({
            level: config_1.configData.logLevel || 'info',
            format: consoleFormat
        })
    ],
    silent: process.env.NODE_ENV === 'test'
});
// Printing this info here instead of in ./config to prevent a circular dependency.
logger.debug("Server SDK v3 SaaS URL: " + config_1.configData.SaaSUrl);
logger.debug("Server SDK v3 Log Level: " + config_1.configData.logLevel);
logger.debug("Server SDK v3 Debug: " + config_1.configData.debug);
exports.default = logger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUEyRDtBQUMzRCxtQ0FBc0M7QUFFdEMsc0tBQXNLO0FBQ3RLLElBQU0sYUFBYSxHQUFHLG1CQUFVLENBQUMsT0FBTyxLQUFLLE9BQU87SUFDbEQsQ0FBQyxDQUFDLGdCQUFNLENBQUMsT0FBTyxDQUNkLGdCQUFNLENBQUMsUUFBUSxFQUFFLEVBQ2pCLGdCQUFNLENBQUMsU0FBUyxDQUFDO1FBQ2YsTUFBTSxFQUFFLGNBQWM7S0FDdkIsQ0FBQyxFQUNGLGdCQUFNLENBQUMsTUFBTSxDQUFDLFVBQUEsSUFBSTtRQUNoQixPQUFVLElBQUksQ0FBQyxTQUFTLFNBQUksSUFBSSxDQUFDLEtBQUssVUFBSyxJQUFJLENBQUMsT0FBUyxDQUFDO0lBQzVELENBQUMsQ0FBQyxDQUNIO0lBQ0QsQ0FBQyxDQUFDLGdCQUFNLENBQUMsT0FBTyxDQUNkLGdCQUFNLENBQUMsTUFBTSxDQUFDLFVBQUEsSUFBSTtRQUNoQixPQUFVLElBQUksQ0FBQyxLQUFLLFVBQUssSUFBSSxDQUFDLE9BQVMsQ0FBQztJQUMxQyxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBRUosd0dBQXdHO0FBQ3hHLElBQU0sTUFBTSxHQUFHLHNCQUFZLENBQUM7SUFDMUIsTUFBTSxFQUFFLGdCQUFNLENBQUMsT0FBTyxDQUNwQixnQkFBTSxDQUFDLEtBQUssRUFBRSxFQUNkLGdCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQy9CO0lBQ0QsVUFBVSxFQUFFO1FBQ1YsSUFBSSxvQkFBVSxDQUFDLE9BQU8sQ0FBQztZQUNyQixLQUFLLEVBQUUsbUJBQVUsQ0FBQyxRQUFRLElBQUksTUFBTTtZQUNwQyxNQUFNLEVBQUUsYUFBYTtTQUN0QixDQUFDO0tBQ0g7SUFDRCxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssTUFBTTtDQUN4QyxDQUFDLENBQUM7QUFFSCxtRkFBbUY7QUFDbkYsTUFBTSxDQUFDLEtBQUssQ0FBQyw2QkFBMkIsbUJBQVUsQ0FBQyxPQUFTLENBQUMsQ0FBQztBQUM5RCxNQUFNLENBQUMsS0FBSyxDQUFDLDhCQUE0QixtQkFBVSxDQUFDLFFBQVUsQ0FBQyxDQUFDO0FBQ2hFLE1BQU0sQ0FBQyxLQUFLLENBQUMsMEJBQXdCLG1CQUFVLENBQUMsS0FBTyxDQUFDLENBQUM7QUFFekQsa0JBQWUsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlTG9nZ2VyLCBmb3JtYXQsIHRyYW5zcG9ydHMgfSBmcm9tICd3aW5zdG9uJztcbmltcG9ydCB7IGNvbmZpZ0RhdGEgfSBmcm9tICcuL2NvbmZpZyc7XG5cbi8vIE9ubHkgYWRkaW5nIHRoZSB0aW1lc3RhbXAgaWYgcnVubmluZyBsb2NhbGx5LiBPdGhlcndpc2UgdGhlIHRpbWVzdGFtcCBpcyBsaXR0bGUgcmVkdW5kYW50IHdoZW4gY2FuIGJlIGFkZGVkIGluIHN1cHBsZW1lbnRhcnkgZmFzaGlvbiBvdXRzaWRlIG9mIHRoZSBtZXNzYWdlIGl0c2VsZi5cbmNvbnN0IGNvbnNvbGVGb3JtYXQgPSBjb25maWdEYXRhLm5vZGVFbnYgPT09ICdsb2NhbCdcbiAgPyBmb3JtYXQuY29tYmluZShcbiAgICBmb3JtYXQuY29sb3JpemUoKSxcbiAgICBmb3JtYXQudGltZXN0YW1wKHtcbiAgICAgIGZvcm1hdDogJ0hIOm1tLnNzLlNTUydcbiAgICB9KSxcbiAgICBmb3JtYXQucHJpbnRmKGluZm8gPT4ge1xuICAgICAgcmV0dXJuIGAke2luZm8udGltZXN0YW1wfSAke2luZm8ubGV2ZWx9OiAke2luZm8ubWVzc2FnZX1gO1xuICAgIH0pXG4gIClcbiAgOiBmb3JtYXQuY29tYmluZShcbiAgICBmb3JtYXQucHJpbnRmKGluZm8gPT4ge1xuICAgICAgcmV0dXJuIGAke2luZm8ubGV2ZWx9OiAke2luZm8ubWVzc2FnZX1gO1xuICAgIH0pXG4gICk7XG5cbi8vIENvbmZpZ3VyZSB0aGUgV2luc3RvbiBsb2dnZXIuIEZvciB0aGUgY29tcGxldGUgZG9jdW1lbnRhdGlvbiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dpbnN0b25qcy93aW5zdG9uXG5jb25zdCBsb2dnZXIgPSBjcmVhdGVMb2dnZXIoe1xuICBmb3JtYXQ6IGZvcm1hdC5jb21iaW5lKFxuICAgIGZvcm1hdC5zcGxhdCgpLFxuICAgIGZvcm1hdC5lcnJvcnMoeyBzdGFjazogdHJ1ZSB9KVxuICApLFxuICB0cmFuc3BvcnRzOiBbXG4gICAgbmV3IHRyYW5zcG9ydHMuQ29uc29sZSh7XG4gICAgICBsZXZlbDogY29uZmlnRGF0YS5sb2dMZXZlbCB8fCAnaW5mbycsXG4gICAgICBmb3JtYXQ6IGNvbnNvbGVGb3JtYXRcbiAgICB9KVxuICBdLFxuICBzaWxlbnQ6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCdcbn0pO1xuXG4vLyBQcmludGluZyB0aGlzIGluZm8gaGVyZSBpbnN0ZWFkIG9mIGluIC4vY29uZmlnIHRvIHByZXZlbnQgYSBjaXJjdWxhciBkZXBlbmRlbmN5LlxubG9nZ2VyLmRlYnVnKGBTZXJ2ZXIgU0RLIHYzIFNhYVMgVVJMOiAke2NvbmZpZ0RhdGEuU2FhU1VybH1gKTtcbmxvZ2dlci5kZWJ1ZyhgU2VydmVyIFNESyB2MyBMb2cgTGV2ZWw6ICR7Y29uZmlnRGF0YS5sb2dMZXZlbH1gKTtcbmxvZ2dlci5kZWJ1ZyhgU2VydmVyIFNESyB2MyBEZWJ1ZzogJHtjb25maWdEYXRhLmRlYnVnfWApO1xuXG5leHBvcnQgZGVmYXVsdCBsb2dnZXI7XG4iXX0=